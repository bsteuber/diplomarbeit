(haskell 
  (module Comp2Haskell 
     (Prelude (hiding lines words take))
     Control.Arrow
     Util
     Arrows
     Sexp
     Parser
     Model)
 
  (type compQuote (SexpParser Sexp))
  (= compQuote (macro (Str ') inner)
    (where 
      (= inner (<+> unquote procSymbol procNode))           
      (= procSymbol                                      
         (>>> takeSymbol
              (arr quoteSymbol)))
      (= procNode                  
         (>>> (compNode (&&& takeSymbol inners))
              (arr quoteNode)))
      (= inners                     
         (>>> (many (<+> unquoteAll 
                         (>>> inner 
                              (arr (singleNode (Str List))))))
              (arr (namedNode (Str ++)))))
      (= unquote   
         (macro (Str ,) take))
      (= unquoteAll     
         (macro (Str ,@) take))
      (= quoteSymbol     
         (. (singleNode (Str symbol))
            (singleNode (Str Str))
            symbol))
      (= (quoteNode (Tuple lbl inner)) 
         (namedNode (Str namedNode) 
                    (List (singleNode (Str Str) (symbol lbl))
                          inner)))))

(type comp2haskell (SexpParser (List Sexp)))
(= comp2haskell (simpleTraverse (List compQuote)))

)