(haskell
  (module
      Comp2Haskell
      Control.Monad
      Util
      Sexp      
      Eater
      Macro
  )

  (= escapeLang (eatNodeNamed (str escapeLang) eatAny))


quoteSexp :: String -> [Sexp] -> Sexp
quoteSexp l cs =
    Sexp "Sexp" [Sexp "str" [symbol l],
                 Sexp "List" cs]

  (= oldQuote (eatNodeNamed (str ') eatInner)
     (where (= eatInner
               (eatOrs (List
                 (eatSymbolFun quoteSymbol)
                 (eatNodeNamed (str ,) eatAny)
                 (eatNodeFun (fun name (do
                                         (<- inners eatInners)
                                         (return (quoteNode name (List inners)))))))))
            (= eatInners
              (liftM (Node (str ++)) (manySexp (eatOr 
                                       (eatNodeNamed (str ,@) eatAny)
                                       (liftM (Node (str List)) (liftM single eatInner))))))
     ))


  (= quote (eatNodeNamed (str ') eatInner)
     (where (type eatInner (SexpEater Sexp))
            (= eatInner
               (eatOrs (List
                 (eatSymbolFun Symbol)
                 (eatNodeNamed (str ,) eatAny)
                 (eatNodeFun (fun name (do
                                         (<- inners eatInners)
                                         (return (Node name inners))))))))
            (type eatInners (SexpEater Stream))
            (= eatInners
              (liftM concat (eatMany (eatOr 
                                       (eatNodeNamed (str ,@) eatRest)
                                       (liftM single eatInner)))))
     ))

  (= eatHeader (eatSymbolFun (fun sym 
                               (Node (str module)
                                          (map Symbol
                                            (List
                                              sym
                                              (str Control.Monad)
                                              (str Util)
                                              (str Sexp)
                                              (str Eater)
                                              (str Macro)))))))
                                              

  (= eatMacro (eatNodeNamed (str macro)
                 (do (<- macName eatAnySymbol)
                     (<- macMatcher eatAnySymbol)
                     (<- macBody eatAny)
                     (return (Node (str =)
                                   (List (Symbol macName)
                                         (Node (str eatNodeNamed)
                                               (List (Node (str str) (List (Symbol macMatcher)))
                                                     macBody))))))))
                                         

  (= comp2haskell (eater2singleTrans
                    (eatNodeNamed (str compiler)
                      (liftM (Node (str haskell)) (do
                        (<- header eatHeader)
                        (<- macs (manySexp (eatMacro)))
                        (return (: header macs)))))))
)
