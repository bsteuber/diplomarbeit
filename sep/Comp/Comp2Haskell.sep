(compiler Comp2Haskell (imports Data.Maybe))
                
(def LispMacro comp2haskell 
     (applyParser
      (liftA2 gen 
              compAutoCompiler             
              (>>^ (many (<+> genQuotes 
                              (>>^ take single)))
                   concat))
      compAuto)
     (where
      (= compAutoCompiler (macro (Str compiler)
           (&&& compSymbol
                (optMacro (Str imports) (many take)))))
      (= (extractAutoMacs defs)
         (mapMaybe extractAutoMac defs))
      (= (extractAutoMac (Node (Cons (Symbol (Str autoMac)) name _))) (Just name))
      (= (extractAutoMac _) Nothing)
      (= (gen (Tuple name imports) defs)
         (' (module (, name)
                    (Prelude (hiding id lines words take))
                    Data.IORef
                    (Control.Category (only id))
                    Control.Arrow
                    System.IO.Unsafe
                    Util
                    Arrows
                    Sexp
                    Parser
                    Model
                    (,@ imports))
            (,@ defs)
            (def LispMacro compAuto
               (lispTraverse (List (,@ (extractAutoMacs defs)))))))))

(autoMac compMac mac
     (liftA4 gen take take take (many take))
     (where (= (gen fun sym cmd cmds)
               (' (def LispMacro (, fun) (macro (Str (, sym)) (, cmd)) (,@ cmds))))))

(autoMac compAutoMac autoMac
     (liftA4 gen take take take (many take))
     (where (= (gen fun sym cmd cmds)
               (' (def LispMacro (, fun) (macro (Str (, sym)) (, cmd)) (,@ cmds))))))

(autoMac compDef def
  (liftA3 gen take take (many take))
     (where (= (gen typ name cmds)
               (' (hasType (, name) (, typ))
                  (= (, name) (,@ cmds))))))

(mac genQuotes quotes (constArrow qts)
       (where (= qts 
                 (concatMap (. genQt mkSyms) (List (Str) (Str 1) (Str 2) (Str 3))))
              (= (mkSyms s)
                 (map (. symbol (fun str (++ str s)))
                      (List (Str compQuote)
                            (Str ')
                            (Str ,)        
                            (Str ,@))))        
              (= (genQt (List name symQuote symUnquote symUnquoteAll))
                 ('1 (autoMac (,1 name) (,1 symQuote) inners                          
                      (where
		       (= inner (<+> unquote
                                     (>>^ takeSymbol quoteSymbol)                                     
                                     (>>^ (compNode inners) quoteNode)))
		       (= inners
                          (>>^ (many (<+> unquoteAll 
                                          (>>^ inner quoteList)))
			       (>>> concat quoteAppend)))
                       (mac unquote (,1 symUnquote) (>>^ take single))
                       (mac unquoteAll (,1 symUnquoteAll) (>>^ take single))
                       (= (quoteSymbol sym)
                          (' (Symbol (Str (, (Symbol sym))))))
                       (= (quoteNode sexps)
                          (' (Node (,@ sexps))))
		       (= (quoteList sexps)
			  (' (List (,@ sexps))))
		       (= (quoteAppend sexps)
			  (' (++ (,@ sexps))))))))))

(quotes)