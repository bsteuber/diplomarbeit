(haskell  
  (module Comp2Haskell 
     (Prelude (hiding lines words take))
     Control.Arrow
     Util
     Arrows
     Sexp
     Parser
     Model)
 
  (mac compMac mac 
       (liftA4 gen compSymbol compSymbol take comp2haskell)
    (where (= (gen fun sym cmd cmds)
              (' (type (, fun) LispMacro)
                 (= (, fun) (macro (Str (, sym)) (, cmd)) (,@ cmds))))))

(mac genQuotes quotes (constArrow qts)
       (where (= qts 
                 (concatMap (. genQt mkSyms) (List (Str) (Str 1) (Str 2) (Str 3))))
              (= (mkSyms s)
                 (map (. symbol (fun str (++ str s)))
                      (List (Str compQuote)
                            (Str ')
                            (Str ,)        
                            (Str ,@))))        
              (= (genQt (List name symQuote symUnquote symUnquoteAll))
                 (' (mac (, name) (, symQuote)
                         (>>^ inners single)
                      (where 
                       (= inner (<+> unquote procSymbol procNode))           
                       (= procSymbol                                      
                          (>>> takeSymbol
                               (arr quoteSymbol)))
                       (= procNode                  
                          (>>> (compNode inners)
                               (arr quoteNode)))
                       (= inners                     
                          (>>> (many (<+> unquoteAll 
                                          (>>> inner 
                                               (arr (namedNode (Str List))))))
                               (arr (namedNode (Str ++)))))
                       (mac unquote (, symUnquote) (>>^ take single))
                       (= unquoteAll (macro (Str (, symUnquoteAll)) take))
                       (= (quoteSymbol str)
                          ('1 (symbol (Str (,1 (symbol str))))))
                       (= (quoteNode nod)
                          ('1 (node (,1 nod))))))))))

(quotes)

(type comp2haskell LispMacro)
(= comp2haskell (simpleTraverse (List genQuotes 
                                      compQuote 
                                      compQuote1 
                                      compQuote2
                                      compQuote3
                                      compMac)))
 
)