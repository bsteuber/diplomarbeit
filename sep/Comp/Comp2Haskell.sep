(expandCompiler Comp2Haskell 

(hasType regAutoMacs (IORef (List Sexp)))
(= regAutoMacs (unsafePerformIO (newIORef [])))

(= addAutoMac (ioToParser (fun m
                           (do (modifyIORef regAutoMacs (fun ms (: m ms)))
                               (return m)))))

(= getAutoMacs (ioToParser (const (readIORef regAutoMacs))))

(autoMac compExpandCompiler expandCompiler 
     (liftA2 gen 
             (>>> compSymbol 
                  (&&& id (arr symbolToLower)))
             (many take))
     (where
      (= (gen (Tuple name lowerName) defs)
         (' (module (, name)
                    (Prelude (hiding id lines words take))
                    Data.IORef
                    (Control.Category (only id))
                    Control.Arrow
                    System.IO.Unsafe
                    Util
                    Arrows
                    Sexp
                    Parser
                    Model)
            (,@ defs)
            (hasType (, lowerName) LispMacro)
            (= (, lowerName) (simpleTraverse (allAutoMacs)))))))                       

(autoMac compAllAutoMacs allAutoMacs (>>^ getAutoMacs listAutoMacs)
     (where (= (listAutoMacs ms) (' (List (,@ ms))))))
                               
(autoMac compAutoMac autoMac 
     (liftA4 gen (>>> compSymbol addAutoMac) compSymbol take (many take))
     (where (= (gen fun sym cmd cmds)
               (' (hasType (, fun) LispMacro)
                  (= (, fun) (macro (Str (, sym)) (, cmd)) (,@ cmds))))))

(autoMac compMac mac
     (liftA4 gen take take take (many take))
     (where (= (gen fun sym cmd cmds)
               (' (def LispMacro (, fun) (macro (Str (, sym)) (, cmd)) (,@ cmds))))))

(autoMac compDef def
  (liftA3 gen take take (many take))
     (where (= (gen typ name cmds)
               (' (hasType (, name) (, typ))
                  (= (, name) (,@ cmds))))))

(autoMac genQuotes quotes (constArrow qts)
       (where (= qts 
                 (concatMap (. genQt mkSyms) (List (Str) (Str 1) (Str 2) (Str 3))))
              (= (mkSyms s)
                 (map (. symbol (fun str (++ str s)))
                      (List (Str compQuote)
                            (Str ')
                            (Str ,)        
                            (Str ,@))))        
              (= (genQt (List name symQuote symUnquote symUnquoteAll))
                 ('1 (autoMac (,1 name) (,1 symQuote) inners                          
                      (where
		       (def LispMacro inner (<+> unquote procSymbol procNode))
		       (def LispMacro procSymbol                                      
                          (>>^ takeSymbol quoteSymbol))
		       (def LispMacro procNode                  
                          (>>^ (compNode inners) quoteNode))
		       (def LispMacro inners
                          (>>^ (many (<+> unquoteAll 
                                          (>>^ inner quoteList)))
			       (>>> concat quoteAppend)))
                       (mac unquote (,1 symUnquote) (>>^ take single))
                       (mac unquoteAll (,1 symUnquoteAll) (>>^ take single))
                       (= (quoteSymbol sym)
                          (' (Symbol (Str (, (Symbol sym))))))
                       (= (quoteNode sexps)
                          (' (Node (,@ sexps))))
		       (= (quoteList sexps)
			  (' (List (,@ sexps))))
		       (= (quoteAppend sexps)
			  (' (++ (,@ sexps))))))))))

(quotes)

)