(haskell  
  (module Comp2Haskell 
     (Prelude (hiding lines words take))
     Control.Arrow
     Util
     Arrows
     Sexp
     Parser
     Model)
 
  (mac compMac mac 
       (liftA4 gen compSymbol compSymbol take comp2haskell)
    (where (= (gen fun sym cmd cmds)
              (' (type (, fun) LispMacro)
                 (= (, fun) (macro (Str (, sym)) (, cmd)) (,@ cmds))))))

(mac genQuotes quotes (constArrow qts)
       (where (= qts 
                 (concatMap (. getQt mkSyms) (List (Str) (Str 1) (Str 2) (Str 3))))
              (= (mkSyms s)
                 (Tuple (++ (Str ') s) (++ (Str ,) s) (++ (Str ,@) s)))
              (= (genQt (Tuple symQuote symUnquote symUnquoteAll))
                 (' (mac compQuote '
                         (>>^ inners single)
                      (where 
                       (= inner (<+> unquote procSymbol procNode))           
                       (= procSymbol                                      
                          (>>> takeSymbol
                               (arr quoteSymbol)))
                       (= procNode                  
                          (>>> (compNode inners)
                               (arr quoteNode)))
                       (= inners                     
                          (>>> (many (<+> unquoteAll 
                                          (>>> inner 
                                               (arr (namedNode (Str List))))))
                               (arr (namedNode (Str ++)))))
                       (mac unquote    , (>>^ take single))
                       (mac unquoteAll ,@ take)
                       (= (quoteSymbol str)
                          ('1 (symbol (Str (,1 (symbol str))))))
                       (= (quoteNode nod)
                          ('1 (node (,1 nod))))))))))

  (type compQuote LispMacro)
  (= compQuote (macro (Str ') (>>^ inners single))
    (where 
      (= inner (<+> unquote procSymbol procNode))           
      (= procSymbol                                      
         (>>> takeSymbol
              (arr quoteSymbol)))
      (= procNode                  
         (>>> (compNode inners)
              (arr quoteNode)))
      (= inners                     
         (>>> (many (<+> unquoteAll 
                         (>>> inner 
                              (arr (namedNode (Str List))))))
              (arr (namedNode (Str ++)))))
      (= unquote   
         (macro (Str ,) (>>^ take single)))
      (= unquoteAll     
         (macro (Str ,@) take))
      (= (quoteSymbol str)
         (' (symbol (Str (, (symbol str))))))
      (= (quoteNode nod)
         (' (node (, nod))))))

  (type compQuote1 LispMacro)
  (= compQuote1 (macro (Str '1) (>>^ inners single))
    (where 
      (= inner (<+> unquote procSymbol procNode))           
      (= procSymbol                                      
         (>>> takeSymbol
              (arr quoteSymbol)))
      (= procNode                  
         (>>> (compNode inners)
              (arr quoteNode)))
      (= inners                     
         (>>> (many (<+> unquoteAll 
                         (>>> inner 
                              (arr (namedNode (Str List))))))
              (arr (namedNode (Str ++)))))
      (= unquote   
         (macro (Str ,1) (>>^ take single)))
      (= unquoteAll     
         (macro (Str ,@1) take))
      (= (quoteSymbol str)
         (' (symbol (Str (, (symbol str))))))
      (= (quoteNode nod)
         (' (node (, nod))))))


(type comp2haskell LispMacro)
(= comp2haskell (simpleTraverse (List compQuote compQuote1 compMac)))
 
)