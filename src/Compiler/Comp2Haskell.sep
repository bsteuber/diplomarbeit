(haskell
  (module
      Comp2Haskell
      Control.Monad
      Util
      Sexp      
      Eater
      Macro
  )

  (= quote (eatNodeNamed (str ') eatInner)
     (where (= eatInner
               (eatOrs (List
                 (eatSymbolFun quoteSym)
                 (eatNodeNamed (str ,) eatAny)
                 (eatNodeFun (fun name (do
                                         (<- inners eatInners)
                                         (return (quoteNode name (List inners)))))))))
            (= eatInners
              (liftM (Node (str ++)) (eatMany (eatOr 
                                       (eatNodeNamed (str ,@) eatAny)
                                       (liftM (Node (str List)) (liftM single eatInner))))))
            (= (quoteSym str) 
               (Node (str Symbol) 
                     (List (Node (str str) (List (Symbol str))))))
            (= (quoteNode str inner) 
               (Node (str Node) 
                     (List (Node (str str)
                                 (List (Symbol str)))
                           (Node (str List)
                                 inner))))

     ))

  (= comp2haskell (eater2singleTrans quote))
)